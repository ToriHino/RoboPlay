//
// RoboPlay
//
// Copyright (C) 2019 by RoboSoft.
//
// Made with FUSION-C in SDCC
//
// Standard MIDI file player

#ifndef __MID_H
#define __MID_H

#define READ_BUFFER       0xC000
#define READ_BUFFER_SIZE  0x1000

#define VOICES_COUNT 18

#define MIDI_HEADER_SIZE  14

#define MAXTRACKS 16

#define USEC_INC 858

const uint16_t FreqTable[128] = {                                /* note # */
        345, 365, 387, 410, 435, 460, 488, 517, 547, 580, 615, 651,  /*  0 */
        690, 731, 774, 820, 869, 921, 975, 517, 547, 580, 615, 651,  /* 12 */
        690, 731, 774, 820, 869, 921, 975, 517, 547, 580, 615, 651,  /* 24 */
        690, 731, 774, 820, 869, 921, 975, 517, 547, 580, 615, 651,  /* 36 */
        690, 731, 774, 820, 869, 921, 975, 517, 547, 580, 615, 651,  /* 48 */
        690, 731, 774, 820, 869, 921, 975, 517, 547, 580, 615, 651,  /* 60 */
        690, 731, 774, 820, 869, 921, 975, 517, 547, 580, 615, 651,  /* 72 */
        690, 731, 774, 820, 869, 921, 975, 517, 547, 580, 615, 651,  /* 84 */
        690, 731, 774, 820, 869, 921, 975, 517, 547, 580, 615, 651,  /* 96 */
        690, 731, 774, 820, 869, 921, 975, 517, 547, 580, 615, 651, /* 108 */
        690, 731, 774, 820, 869, 921, 975, 517};                    /* 120 */

const uint8_t OctaveTable[128] = {                               /* note # */
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,                          /*  0 */
        0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1,                          /* 12 */
        1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2,                          /* 24 */
        2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3,                          /* 36 */
        3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4,                          /* 48 */
        4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5,                          /* 60 */
        5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6,                          /* 72 */
        6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7,                          /* 84 */
        7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8,                          /* 96 */
        8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9,                         /* 108 */
        9, 9, 9, 9, 9, 9, 9,10};                                    /* 120 */

const uint16_t PitchTable[256] = {                          /* pitch wheel */
         29193,29219,29246,29272,29299,29325,29351,29378,       /* -128 */
         29405,29431,29458,29484,29511,29538,29564,29591,       /* -120 */
         29618,29644,29671,29698,29725,29752,29778,29805,       /* -112 */
         29832,29859,29886,29913,29940,29967,29994,30021,       /* -104 */
         30048,30076,30103,30130,30157,30184,30212,30239,       /*  -96 */
         30266,30293,30321,30348,30376,30403,30430,30458,       /*  -88 */
         30485,30513,30541,30568,30596,30623,30651,30679,       /*  -80 */
         30706,30734,30762,30790,30817,30845,30873,30901,       /*  -72 */
         30929,30957,30985,31013,31041,31069,31097,31125,       /*  -64 */
         31153,31181,31209,31237,31266,31294,31322,31350,       /*  -56 */
         31379,31407,31435,31464,31492,31521,31549,31578,       /*  -48 */
         31606,31635,31663,31692,31720,31749,31778,31806,       /*  -40 */
         31835,31864,31893,31921,31950,31979,32008,32037,       /*  -32 */
         32066,32095,32124,32153,32182,32211,32240,32269,       /*  -24 */
         32298,32327,32357,32386,32415,32444,32474,32503,       /*  -16 */
         32532,32562,32591,32620,32650,32679,32709,32738,       /*   -8 */
         32768,32798,32827,32857,32887,32916,32946,32976,       /*    0 */
         33005,33035,33065,33095,33125,33155,33185,33215,       /*    8 */
         33245,33275,33305,33335,33365,33395,33425,33455,       /*   16 */
         33486,33516,33546,33576,33607,33637,33667,33698,       /*   24 */
         33728,33759,33789,33820,33850,33881,33911,33942,       /*   32 */
         33973,34003,34034,34065,34095,34126,34157,34188,       /*   40 */
         34219,34250,34281,34312,34343,34374,34405,34436,       /*   48 */
         34467,34498,34529,34560,34591,34623,34654,34685,       /*   56 */
         34716,34748,34779,34811,34842,34874,34905,34937,       /*   64 */
         34968,35000,35031,35063,35095,35126,35158,35190,       /*   72 */
         35221,35253,35285,35317,35349,35381,35413,35445,       /*   80 */
         35477,35509,35541,35573,35605,35637,35669,35702,       /*   88 */
         35734,35766,35798,35831,35863,35895,35928,35960,       /*   96 */
         35993,36025,36058,36090,36123,36155,36188,36221,       /*  104 */
         36254,36286,36319,36352,36385,36417,36450,36483,       /*  112 */
         36516,36549,36582,36615,36648,36681,36715,36748U};     /*  120 */


const uint16_t Op1Offsets[18] = {0x00,0x01,0x02,0x08,0x09,0x0a,0x10,0x11,0x12,0x100,0x101,0x102,0x108,0x109,0x10a,0x110,0x111,0x112};
const uint16_t Op2Offsets[18] = {0x03,0x04,0x05,0x0b,0x0c,0x0d,0x13,0x14,0x15,0x103,0x104,0x105,0x10b,0x10c,0x10d,0x113,0x114,0x115};

typedef struct {
  uint32_t modulator_E862, carrier_E862;
  uint8_t modulator_40, carrier_40;
  uint8_t feedconn;
} TIMBRE_T;

static TIMBRE_T GMtimbres[256] = {
/* ,---------+-------- Wave select settings                        *
 * | ,-------÷-+------ Sustain/release rates                       *
 * | | ,-----÷-÷-+---- Attack/decay rates                          *
 * | | | ,---÷-÷-÷-+-- AM/VIB/EG/KSR/Multiple bits                 *
 * | | | |   | | | |                                               *
 * | | | |   | | | |    ,----+-- KSL/attenuation settings          *
 * | | | |   | | | |    |    |    ,----- Feedback/connection bits  *
 * | | | |   | | | |    |    |    |                                */
{0x052F221,0x073D231,0x4F,0x00,0x06},
{0x053F101,0x074D211,0x4F,0x00,0x06},
{0x1F5F213,0x0F5F111,0xC6,0x00,0x00},
{0x0F9F131,0x0F9F331,0x8E,0x80,0x0A},
{0x050F101,0x07CD201,0x4F,0x04,0x06},
{0x013F202,0x043F502,0x22,0x00,0x0E},
{0x0F9F131,0x0F9F332,0x8E,0x80,0x0A},
{0x153F101,0x274F111,0x49,0x00,0x06},
{0x061F217,0x074F212,0x4F,0x08,0x08},
{0x060F207,0x072F212,0x4F,0x0A,0x08},
{0x061F217,0x0B2F112,0x4F,0x08,0x08},
{0x212AA93,0x021AC91,0x97,0x00,0x0E},
{0x015DA85,0x013F981,0x4E,0x80,0x0A},
{0x0F0FF06,0x0B5F8C4,0x00,0x00,0x0E},
{0x060F217,0x072F202,0x4F,0x10,0x08},
{0x053F103,0x074F217,0x4F,0x0B,0x06},
{0x00FFF64,0x00FFF21,0x86,0x80,0x01},
{0x00FFF24,0x00FFF21,0x80,0x80,0x01},
{0x0FFF001,0x00F9031,0x4F,0x00,0x06},
{0x1069FB2,0x10F94B0,0xC0,0x80,0x09},
{0x0FFF001,0x00F9033,0x4F,0x08,0x06},
{0x00BF224,0x00B5231,0x4F,0x10,0x0E},
{0x0035121,0x0674262,0x15,0x80,0x0A},
{0x0AFF5E1,0x10FF4E1,0xD0,0x00,0x0C},
{0x021FF13,0x003FF11,0x96,0x80,0x0A},
{0x001FF11,0x003FF11,0x8D,0x80,0x00},
{0x171F503,0x083F211,0x5E,0x00,0x0E},
{0x031F121,0x044F406,0x40,0x80,0x00},
{0x01FF201,0x088F501,0x11,0x00,0x0A},
{0x053F131,0x227F232,0x48,0x00,0x06},
{0x01A9162,0x01AC1E6,0x40,0x03,0x08},
{0x0AF73C8,0x07FF3C4,0x12,0x00,0x08},
{0x0B69401,0x0268300,0x00,0x00,0x01},
{0x0EEC100,0x0DEF301,0x23,0x00,0x0A},
{0x071FB50,0x0B9F300,0x00,0x00,0x00},
{0x0EFF230,0x078F521,0x1E,0x00,0x0E},
{0x1889500,0x003FF10,0x40,0x00,0x06},
{0x1F7F500,0x3F7F500,0x10,0x00,0x00},
{0x025F911,0x034F131,0x05,0x00,0x0A},
{0x021D500,0x0018310,0x4F,0x00,0x0A},
{0x2035170,0x2675420,0x1C,0x00,0x0E},
{0x21152F0,0x1FE31F1,0xD0,0x80,0x00},
{0x11152B0,0x1FE31B1,0xC5,0x80,0x00},
{0x01172A0,0x1FE51A0,0xC0,0x80,0x08},
{0x01171B1,0x1154261,0x8B,0x40,0x06},
{0x0F9F131,0x0E6F731,0x9C,0x80,0x0E},
{0x171F502,0x083F211,0x60,0x40,0x0E},
{0x005F010,0x004D011,0x25,0x80,0x0E},
{0x2005130,0x2655420,0x1C,0x00,0x0E},
{0x01151B1,0x1154261,0x8B,0x40,0x06},
{0x1037531,0x0445462,0x1A,0x00,0x0E},
{0x0817021,0x12C7322,0x16,0x00,0x0C},
{0x0089021,0x02BFA23,0x40,0x8E,0x01},
{0x0F2F251,0x2F2F241,0x0D,0x00,0x0A},
{0x173F141,0x074F241,0x4F,0x10,0x06},
{0x00591C0,0x20462C1,0x0F,0x00,0x0A},
{0x00B4131,0x03B9261,0x1C,0x80,0x0E},
{0x01F41B1,0x03B9261,0x1C,0x80,0x0E},
{0x0655200,0x0767301,0x1D,0x00,0x0E},
{0x08C4321,0x02F8521,0x19,0x80,0x0C},
{0x05A5321,0x01AAA21,0x9F,0x80,0x0C},
{0x0AE71E1,0x09E81E2,0x15,0x0A,0x0E},
{0x029BB21,0x00A9021,0x8E,0x80,0x08},
{0x0AE71E1,0x09E81E1,0x16,0x0A,0x0A},
{0x2AE71E0,0x09E80E4,0x23,0x00,0x0A},
{0x0537101,0x07C5212,0x4F,0x00,0x0A},
{0x0687120,0x05E5231,0x4E,0x00,0x0A},
{0x05B7110,0x07B5251,0x4F,0x00,0x0E},
{0x009F021,0x00A9024,0x92,0x00,0x0A},
{0x0176EB1,0x00E8BA1,0xC5,0x80,0x02},
{0x019D530,0x01B6171,0xC8,0x80,0x0C},
{0x01B5132,0x03BA261,0x9A,0x82,0x0C},
{0x0160020,0x0155022,0x5B,0x80,0x0A},
{0x0177421,0x01765A2,0x83,0x8D,0x07},
{0x08F6EE0,0x02A6561,0xEC,0x00,0x0E},
{0x0160020,0x01550E2,0x5B,0x80,0x0A},
{0x1063F53,0x0075F00,0x85,0x00,0x06},
{0x33457F1,0x05D67E1,0x28,0x00,0x0E},
{0x0C70CF5,0x0A560F6,0x9A,0x80,0x0D},
{0x0537102,0x07C5211,0x4F,0x00,0x0A},
{0x007F804,0x0748201,0x08,0x00,0x08},
{0x04FF660,0x00F7660,0x03,0x00,0x02},
{0x0089782,0x00897F1,0x0D,0x00,0x00},
{0x0F55550,0x0F55500,0x80,0x00,0x08},
{0x0339661,0x02B5521,0x00,0x00,0x06},
{0x203F661,0x004F622,0x07,0x00,0x02},
{0x0E1A311,0x0E4A103,0x80,0x80,0x06},
{0x0F2F251,0x0F2F251,0x41,0x00,0x0A},
{0x034F121,0x044F406,0x40,0x80,0x01},
{0x19041F0,0x006A2B0,0xC0,0x80,0x08},
{0x102FF51,0x002FF01,0x03,0x08,0x04},
{0x0AFF5E1,0x10FF4E1,0xD0,0x00,0x0C},
{0x11122F0,0x02E31F1,0x46,0x80,0x0C},
{0x0D3B305,0x024F246,0x40,0x80,0x02},
{0x0FFF100,0x0FF5011,0x0D,0x80,0x06},
{0x0FF1000,0x0FF5011,0x12,0x80,0x0A},
{0x002A4B4,0x04245F6,0x87,0x80,0x06},
{0x01111F1,0x01111F1,0x41,0x41,0x02},
{0x002A4B4,0x04245F7,0x87,0x80,0x06},
{0x0005874,0x0012635,0x18,0x80,0x06},
{0x003FF40,0x001FF08,0x0D,0x00,0x08},
{0x00F5F00,0x005FF00,0x00,0x00,0x00},
{0x0417F21,0x0213521,0x56,0x00,0x0E},
{0x301F17E,0x001F131,0x00,0x00,0x04},
{0x053F101,0x053F108,0x40,0x40,0x00},
{0x011A131,0x0437D16,0x87,0x80,0x08},
{0x053F101,0x074F219,0x4F,0x00,0x06},
{0x01FF201,0x088F508,0x11,0x00,0x08},
{0x055F502,0x053F601,0x99,0x80,0x00},
{0x1176E31,0x20C8B22,0x43,0x05,0x02},
{0x1037531,0x0445462,0x1C,0x00,0x0E},
{0x0427880,0x0548595,0x4D,0x00,0x0E},
{0x072F107,0x004FC08,0x48,0x80,0x00},
{0x0F6F80E,0x0F6F80E,0x00,0x00,0x00},
{0x1068F02,0x005FF00,0xC0,0x00,0x0A},
{0x097C802,0x097C802,0x00,0x00,0x01},
{0x007FF01,0x007FF01,0x00,0x00,0x07},
{0x096D801,0x096D801,0x00,0x00,0x0A},
{0x0F0F006,0x0B4F600,0x00,0x00,0x0E},
{0x10B5F01,0x10B5F01,0x80,0x80,0x04},
{0x2056651,0x0066642,0x00,0x00,0x00},
{0x0665F53,0x0077F00,0x05,0x00,0x06},
{0x000200E,0x001210E,0x00,0x00,0x0E},
{0x003F1C0,0x001107E,0x4F,0x0C,0x02},
{0x08785F4,0x09974F3,0x50,0x80,0x0C},
{0x1111EF0,0x11111E2,0x00,0xC0,0x08},
{0x00FFF7E,0x00F3F6E,0x00,0x00,0x0E},
{0x0F0A006,0x075C584,0x00,0x00,0x0E},
{0x277F810,0x006F311,0x44,0x00,0x08},
{0x277F810,0x006F311,0x44,0x00,0x08},
{0x277F810,0x006F311,0x44,0x00,0x08},
{0x277F810,0x006F311,0x44,0x00,0x08},
{0x277F810,0x006F311,0x44,0x00,0x08},
{0x277F810,0x006F311,0x44,0x00,0x08},
{0x277F810,0x006F311,0x44,0x00,0x08},
{0x277F810,0x006F311,0x44,0x00,0x08},
{0x277F810,0x006F311,0x44,0x00,0x08},
{0x277F810,0x006F311,0x44,0x00,0x08},
{0x277F810,0x006F311,0x44,0x00,0x08},
{0x277F810,0x006F311,0x44,0x00,0x08},
{0x277F810,0x006F311,0x44,0x00,0x08},
{0x277F810,0x006F311,0x44,0x00,0x08},
{0x277F810,0x006F311,0x44,0x00,0x08},
{0x277F810,0x006F311,0x44,0x00,0x08},
{0x277F810,0x006F311,0x44,0x00,0x08},
{0x277F810,0x006F311,0x44,0x00,0x08},
{0x277F810,0x006F311,0x44,0x00,0x08},
{0x277F810,0x006F311,0x44,0x00,0x08},
{0x277F810,0x006F311,0x44,0x00,0x08},
{0x277F810,0x006F311,0x44,0x00,0x08},
{0x277F810,0x006F311,0x44,0x00,0x08},
{0x277F810,0x006F311,0x44,0x00,0x08},
{0x277F810,0x006F311,0x44,0x00,0x08},
{0x277F810,0x006F311,0x44,0x00,0x08},
{0x277F810,0x006F311,0x44,0x00,0x08},
{0x277F810,0x006F311,0x44,0x00,0x08},
{0x277F810,0x006F311,0x44,0x00,0x08},
{0x277F810,0x006F311,0x44,0x00,0x08},
{0x277F810,0x006F311,0x44,0x00,0x08},
{0x277F810,0x006F311,0x44,0x00,0x08},
{0x277F810,0x006F311,0x44,0x00,0x08},
{0x277F810,0x006F311,0x44,0x00,0x08},
{0x277F810,0x006F311,0x44,0x00,0x08},
{0x277F810,0x006F311,0x44,0x00,0x08},
{0x277F810,0x006F311,0x44,0x00,0x08},
{0x0FFF902,0x0FFF811,0x07,0x00,0x08},
{0x205FC00,0x017FA00,0x00,0x00,0x0E},
{0x007FF00,0x008FF01,0x02,0x00,0x00},
{0x205FC00,0x017FA00,0x00,0x00,0x0E},
{0x00CF600,0x006F600,0x00,0x00,0x04},
{0x008F60C,0x247FB12,0x00,0x00,0x0A},
{0x00CF600,0x006F600,0x00,0x00,0x04},
{0x008F60C,0x2477B12,0x00,0x05,0x0A},
{0x00CF600,0x006F600,0x00,0x00,0x04},
{0x002F60C,0x243CB12,0x00,0x00,0x0A},
{0x00CF600,0x006F600,0x00,0x00,0x04},
{0x00CF600,0x006F600,0x00,0x00,0x04},
{0x000F60E,0x3029FD0,0x00,0x00,0x0E},
{0x00CF600,0x006F600,0x00,0x00,0x04},
{0x042F80E,0x3E4F407,0x08,0x4A,0x0E},
{0x030F50E,0x0029FD0,0x00,0x0A,0x0E},
{0x3E4E40E,0x1E5F507,0x0A,0x5D,0x06},
{0x004B402,0x0F79705,0x03,0x0A,0x0E},
{0x000F64E,0x3029F9E,0x00,0x00,0x0E},
{0x237F811,0x005F310,0x45,0x08,0x08},
{0x000F60E,0x3029FD0,0x00,0x00,0x0E},
{0x303FF80,0x014FF10,0x00,0x0D,0x0C},
{0x042F80E,0x3E4F407,0x08,0x4A,0x0E},
{0x00CF506,0x008F502,0x0B,0x00,0x06},
{0x0BFFA01,0x097C802,0x00,0x00,0x07},
{0x087FA01,0x0B7FA01,0x51,0x00,0x06},
{0x08DFA01,0x0B8F802,0x54,0x00,0x06},
{0x088FA01,0x0B6F802,0x59,0x00,0x06},
{0x30AF901,0x006FA00,0x00,0x00,0x0E},
{0x389F900,0x06CF600,0x80,0x00,0x0E},
{0x388F803,0x0B6F60C,0x80,0x08,0x0F},
{0x388F803,0x0B6F60C,0x85,0x00,0x0F},
{0x04F760E,0x2187700,0x40,0x08,0x0E},
{0x049C80E,0x2699B03,0x40,0x00,0x0E},
{0x305ADD7,0x0058DC7,0xDC,0x00,0x0E},
{0x304A8D7,0x00488C7,0xDC,0x00,0x0E},
{0x306F680,0x3176711,0x00,0x00,0x0E},
{0x205F580,0x3164611,0x00,0x09,0x0E},
{0x0F40006,0x0F5F715,0x3F,0x00,0x01},
{0x3F40006,0x0F5F712,0x3F,0x00,0x00},
{0x0F40006,0x0F5F712,0x3F,0x00,0x01},
{0x0E76701,0x0077502,0x58,0x00,0x00},
{0x048F841,0x0057542,0x45,0x08,0x00},
{0x3F0E00A,0x005FF1E,0x40,0x4E,0x08},
{0x3F0E00A,0x002FF1E,0x7C,0x52,0x08},
{0x04A7A0E,0x21B7B00,0x40,0x08,0x0E},
{0x3E4E40E,0x1395507,0x0A,0x40,0x06},
{0x332F905,0x0A5D604,0x05,0x40,0x0E},
{0x3F30002,0x0F5F715,0x3F,0x00,0x08},
{0x08DFA01,0x0B5F802,0x4F,0x00,0x07},
{0x0000000,0x0000000,0x00,0x00,0x00},
{0x0000000,0x0000000,0x00,0x00,0x00},
{0x0000000,0x0000000,0x00,0x00,0x00},
{0x0000000,0x0000000,0x00,0x00,0x00},
{0x0000000,0x0000000,0x00,0x00,0x00},
{0x0000000,0x0000000,0x00,0x00,0x00},
{0x0000000,0x0000000,0x00,0x00,0x00},
{0x0000000,0x0000000,0x00,0x00,0x00},
{0x0000000,0x0000000,0x00,0x00,0x00},
{0x0000000,0x0000000,0x00,0x00,0x00},
{0x0000000,0x0000000,0x00,0x00,0x00},
{0x0000000,0x0000000,0x00,0x00,0x00},
{0x0000000,0x0000000,0x00,0x00,0x00},
{0x0000000,0x0000000,0x00,0x00,0x00},
{0x0000000,0x0000000,0x00,0x00,0x00},
{0x0000000,0x0000000,0x00,0x00,0x00},
{0x0000000,0x0000000,0x00,0x00,0x00},
{0x0000000,0x0000000,0x00,0x00,0x00},
{0x0000000,0x0000000,0x00,0x00,0x00},
{0x0000000,0x0000000,0x00,0x00,0x00},
{0x0000000,0x0000000,0x00,0x00,0x00},
{0x0000000,0x0000000,0x00,0x00,0x00},
{0x0000000,0x0000000,0x00,0x00,0x00},
{0x0000000,0x0000000,0x00,0x00,0x00},
{0x0000000,0x0000000,0x00,0x00,0x00},
{0x0000000,0x0000000,0x00,0x00,0x00},
{0x0000000,0x0000000,0x00,0x00,0x00},
{0x0000000,0x0000000,0x00,0x00,0x00},
{0x0000000,0x0000000,0x00,0x00,0x00},
{0x0000000,0x0000000,0x00,0x00,0x00},
{0x0000000,0x0000000,0x00,0x00,0x00},
{0x0000000,0x0000000,0x00,0x00,0x00},
{0x0000000,0x0000000,0x00,0x00,0x00},
{0x0000000,0x0000000,0x00,0x00,0x00},
{0x0000000,0x0000000,0x00,0x00,0x00},
{0x0000000,0x0000000,0x00,0x00,0x00},
{0x0000000,0x0000000,0x00,0x00,0x00},
{0x0000000,0x0000000,0x00,0x00,0x00},
{0x0000000,0x0000000,0x00,0x00,0x00},
{0x0000000,0x0000000,0x00,0x00,0x00},
{0x0000000,0x0000000,0x00,0x00,0x00}
};

typedef struct
{
  int16_t priority;
  int16_t timbreid;
  int8_t channel;
  int8_t note;
} VOICEALLOC_T;

typedef struct oplstate_t
{
  int8_t notes2voices[16][128];   /* keeps the map of channel:notes -> voice allocations */
  uint16_t channelpitch[16];      /* per-channel pitch level */
  uint16_t channelvol[16];        /* per-channel pitch level */
  VOICEALLOC_T voices2notes[18];  /* keeps the map of what voice is playing what note/channel currently */
  uint8_t channelprog[16];        /* programs (patches) assigned to channels */
} OPLSTATE_T;

typedef struct 
{
  uint8_t format;
  uint16_t ntracks;
  uint16_t tickdiv; 
} MIDI_HEADER;

typedef struct
{
  uint32_t length;
  uint32_t index;

  uint8_t  startSegment;
  uint8_t* startData;
  uint8_t  currentSegment;
  uint8_t* currentData;

  uint32_t deltaTime;
  uint8_t  statusByte;

  boolean  trackFinished;
} MIDI_TRACK_DATA;

OPLSTATE_T OplMem;

MIDI_HEADER MidiHeader;
MIDI_TRACK_DATA TrackList[MAXTRACKS];

uint32_t Tempo;

boolean FT_LoadMIDITrackData();
uint8_t FT_GetTrackData(uint8_t track);
void FT_GetVariableLen(uint8_t track, uint32_t* value);

void FT_HandleTrackEvent(uint8_t track);
void FT_HandleMetaEvent(uint8_t track, uint8_t subType);
void FT_HandleSysExEvent(uint8_t track, uint8_t subType);

void FT_OplRegWrite(uint16_t reg, uint8_t data);
void FT_LoadInstrument(int8_t voice, TIMBRE_T* timbre);

void FT_VoiceVolume(int8_t voice, uint8_t program, int16_t volume);
void FT_CalcVolume(uint8_t* regbyte, int16_t volume);
void FT_OplNoteOn(int8_t voice, uint8_t note, int8_t pitch);
void FT_OplNoteOff(int8_t voice);

void FT_NoteOn(int8_t channel, uint8_t note, uint8_t velocity);
void FT_NoteOff(int8_t channel, uint8_t note);
void FT_ControlChange(int8_t channel, uint8_t id, uint8_t value);
void FT_ProgramChange(int8_t channel, uint8_t prog);
void FT_PitchWheel(int8_t channel, uint16_t wheel);

#endif